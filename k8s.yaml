apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapi
  labels:
    app: webapi
    version: "0.0.1"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: webapi
  template:
    metadata:
      labels:
        app.kubernetes.io/name: webapi
    spec:
      containers:
        - name: webapi
          image: registry.gitlab.com/chil84/otusaspnetcorea02team02/webapi.core:0.0.1
          envFrom:
            - configMapRef:
                name: webapi-config
          ports:
            - name: https
              containerPort: 7890
          resources:
            limits:
              memory: "1G"
              cpu: "0.1"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: webapi-config
  labels:
    app: webapi
data:
  ElasticsearchOptions__Uri : "http://localhost:9200"
  IS4__Uri : "https://is4-service.default.svc:10001"
  IS4__Audience : "weatherapi"

---

apiVersion: v1
kind: Service
metadata:
  name: webapi-service
  labels:
    app: webapi-service
    version: "0.0.1"
spec:
  type: LoadBalancer
  ports:
    - name: 7890-port
      port: 7890
      targetPort: 7890
  selector:
    app.kubernetes.io/name: webapi
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: is4
  labels:
    app: is4
    version: "0.0.1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: is4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: is4
    spec:
      containers:
        - name: is4
          image: registry.gitlab.com/chil84/otusaspnetcorea02team02/is4:0.0.1
          env:
            - name: ConnectionStrings__PostgresConnection
              value: "Server=postgres-service.default.svc;Port=5432;Database=is4;Username=user;Password=password"
          ports:
            - name: https
              containerPort: 10001
          resources:
            limits:
              memory: "1G"
              cpu: "0.1"

---

apiVersion: v1
kind: Service
metadata:
  name: is4-service
  labels:
    app: is4-service
    version: "0.0.1"
spec:
  type: LoadBalancer
  ports:
    - name: 10001-p
      port: 10001
      targetPort: 10001
  selector:
    app.kubernetes.io/name: is4

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: blazor
  labels:
    app: blazor
    version: "0.0.1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: blazor
  template:
    metadata:
      labels:
        app.kubernetes.io/name: blazor
    spec:
      containers:
        - name: blazor
          image: registry.gitlab.com/chil84/otusaspnetcorea02team02/ui.blazor:0.0.1
          envFrom:
            - configMapRef:
                name: blazor-config
          ports:
            - name: https
              containerPort: 443
            - name: http
              containerPort: 80
          resources:
            limits:
              memory: "1G"
              cpu: "0.1"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: blazor-config
  labels:
    app: blazor
data:
  IS4__Authority : "https://is4-service.default.svc:10001"

---

apiVersion: v1
kind: Service
metadata:
  name: blazor-service
  labels:
    app: blazor-service
    version: "0.0.1"
spec:
  type: LoadBalancer
  ports:
    - name: https
      port: 443
      targetPort: 443
    - name: http
      port: 80
      targetPort: 80
  selector:
    app.kubernetes.io/name: blazor

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres
data:
  POSTGRES_DB: is4
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password

---

kind: PersistentVolume
apiVersion: v1
metadata:
  name: postgres-pv-volume
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/Users/mikhail/pg"

---

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgres-pv-claim
  labels:
    app: postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:14-alpine
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb
          resources:
            limits:
              memory: "1G"
              cpu: "0.1"
      volumes:
        - name: postgredb
          persistentVolumeClaim:
            claimName: postgres-pv-claim

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
    - port: 5432
      targetPort: 5432
  selector:
   app: postgres