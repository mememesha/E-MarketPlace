@page "/"

@inject IHttpClientFactory HttpClientFactoryWithJwt
@inject HttpClient Client
@inject IOptions<WebApiOptions> Options
@inject UserService UserService

@attribute [AllowAnonymous]

<PageTitle>Главная</PageTitle>

<section class="new_items">
    <div class="container-fluid">
        <OffersColums Header="Новые предложения поставщиков" Offers="@_newOffers" OnOfferChanged="@OfferChanged" />
        <hr />
        <OffersColums Header="Новые предложения покупателей" Offers="@_newSales" OnOfferChanged="@OfferChanged" />
    </div>
</section>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private List<OfferShortResponseDto>? _newOffers;
    private List<OfferShortResponseDto>? _newSales;

    protected override async Task OnInitializedAsync()
    {
        @* #if DEBUG
            // Delay в секунду для старта прокси-дебагера в браузере
            // https://docs.microsoft.com/en-us/aspnet/core/blazor/debug?view=aspnetcore-6.0&tabs=visual-studio#troubleshoot=
            await Task.Delay(1000);
            #endif *@

        var authState = await AuthenticationStateTask!;
        var user = authState.User;

        if (user.Identity!.IsAuthenticated && UserService.User == null)
        {
            var userId = authState.User.Claims.FirstOrDefault(c => c.Type == "sub")!.Value;

            var client = HttpClientFactoryWithJwt.CreateClient("WebAPI");

            var userDto = await DataHandler.LoadAsync<UserDto>(Options.Value.Ip +
            Options.Value.GetUserById! + userId, client);

            var offers = new List<OfferShortResponseDto>();
            var reserves = new List<ReserveDto>();

            foreach (var userWithRoleDto in userDto!.UserWithRoleDtos!)
            {
                var offersResponse = await DataHandler.LoadAsync<List<OfferShortResponseDto>>(Options.Value.Ip +
                Options.Value.GetOffersByOrganizationId + userWithRoleDto.OrganizationShortDto!.Id, client);

                foreach (var offer in offersResponse)
                {
                    var reservesResponse = await DataHandler.LoadAsync<ReserveDto>(Options.Value.Ip +
                    Options.Value.GetReservesByOfferId + offer!.Id, client);
                    if (reservesResponse != null)
                        reserves.Add(reservesResponse);
                }

                offers.AddRange(offersResponse!);
            }

            UserService.SetUserData(userDto, offers, reserves);
        }

        await SetNewOffers();
    }

    private async Task OfferChanged()
    {
        await SetNewOffers(true);
        StateHasChanged();
    }

    private async Task SetNewOffers(bool rewrite = false)
    {
        _newOffers = await DataHandler.LoadAsync<List<OfferShortResponseDto>>(
        Options.Value.Ip + Options.Value.GetNewOffers!, Client);

        _newSales = await DataHandler.LoadAsync<List<OfferShortResponseDto>>(
        Options.Value.Ip + Options.Value.GetNewSalesOffers!, Client);
    }
}