@page "/search"

@using System.Web
@using EM.UI.Blazor.Services
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject SearchService _searchService
@inject HttpClient _client

@implements IDisposable

@attribute [AllowAnonymous]

<p>Filter: <input type="text" @bind="@_searchService.Filter"/></p>

<p>Query: @_searchService.Query</p>

<p>Response: @_response</p>


@code {
    private string? _response = "Loading...";

    protected override void OnInitialized()
    {
        _searchService.OnSearch += SearchServiceOnSearch;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
            SearchServiceOnSearch();
    }

    public void Dispose()
    {
        _searchService.OnSearch -= SearchServiceOnSearch;
    }

    private async void SearchServiceOnSearch()
    {
        var query = HttpUtility.ParseQueryString(string.Empty);
        query["query"] = _searchService.Query;
        if(!string.IsNullOrEmpty(_searchService.Filter))
            query["filter"] = _searchService.Filter;

        try
        {
            var response = await _client.GetAsync(_searchService.SearchPath! + query);

            if (!response.IsSuccessStatusCode)
                return;

            _response = await response.Content.ReadAsStringAsync();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        
        StateHasChanged();
    }
}