@inject IHttpClientFactory HttpClientFactoryWithJwt
@inject IOptions<WebApiOptions> Options
@inject UserService UserService

<div class="row">
    <div class="col-12">
        <div class="row">
            <div class="col-12">
                <h1 class="display-5 text-center">@Header</h1>
            </div>
        </div>
        <div class="d-flex justify-content-center">
            @if (Offers == null || UserOffers == null)
            {
                <div class="row g-4">
                    @for (var i = 0; i < 6; i++)
                    {
                        <OfferCardWithPlaceholder />
                    }
                </div>
            }
            else
            {
                @if (!Offers.Any())
                {
                    <div>
                        <label>@EmptyMessage</label>
                    </div>
                }
                else
                {
                    <div class="row g-2">
                        @foreach (var offer in Offers)
                        {
                            <div class="col d-flex justify-content-center">
                                <OfferCard Offer="@offer" ButtonsType="@(UserOffers!.Any(u => u.Id == offer.Id) 
                                        ? CardButtonsType.Edit 
                                        : CardButtonsType.Basket)" OnOfferChanged="@OfferChanged" />
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Parameter]
    public string? Header { get; set; }

    [Parameter]
    public EventCallback<OfferShortResponseDto> OnOfferChanged { get; set; }

    [Parameter]
    public string? EmptyMessage { get; set; }

    [Parameter]
    public List<OfferShortResponseDto>? Offers { get; set; }

    private List<OfferShortResponseDto>? UserOffers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask!;
        var user = authState.User;
        UserOffers = user.Identity!.IsAuthenticated && await UserService.IsLoaded() ? UserService.Offers : new
        List<OfferShortResponseDto>();
    }

    private async Task OfferChanged(OfferShortResponseDto offer)
    {
        var index = UserService.Offers!.FindIndex(o => o.Id == offer.Id);
        UserService.Offers[index] = offer;
        await OnOfferChanged.InvokeAsync(offer);
        StateHasChanged();
    }
}