@inject BasketService BasketService

<div>
    @if (BasketService.Items.Any(i => i.Item!.Id == Offer!.Id))
    {
        <div class="card-footer bg-light" style="cursor: default;">
            <div class="btn-group col-12" role="group" aria-label="Basic example">
                <button type="button" class="btn btn-primary" onclick="@OnRemoveBasketButtonClick">-</button>
                <button type="button" class="btn btn-primary disabled">
                    @BasketService.Items.First(i => i.Item!.Id == Offer!.Id).Count
                </button>
                <button type="button" class="btn btn-primary" onclick="@OnAddBasketButtonClick">+</button>
            </div>
        </div>
    }
    else
    {
        <div class="card-footer bg-light" style="cursor: default;">
            <button class="btn btn-primary col-12" onclick="@OnAddBasketButtonClick">
                <div class="oi oi-basket"></div>
                В корзину
            </button>
        </div>
    }
</div>

@code
{

    [CascadingParameter]
    public IModalService? Modal { get; set; }

    [Parameter]
    public OfferShortResponseDto? Offer { get; set; }

    private async Task OnAddBasketButtonClick(MouseEventArgs obj)
    {
        await BasketService.AddAsync(Offer);
    }

    private async Task OnRemoveBasketButtonClick(MouseEventArgs obj)
    {
        var item = BasketService.Items.FirstOrDefault(i => i.Item!.Id == Offer!.Id);

        if (item is { Count: 1 })
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(RemoveFromBasket.Item), Offer!.Title);

            var removeFromBasketModal = Modal!.Show<RemoveFromBasket>("Удалить из корзины", parameters);
            var result = await removeFromBasketModal.Result;

            if (!result.Cancelled)
            {
                await BasketService.RemoveAsync(Offer);
            }
        }
        else
            await BasketService.RemoveAsync(Offer);
    }
}