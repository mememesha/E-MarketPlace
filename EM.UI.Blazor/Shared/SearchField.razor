@inject NavigationManager NavigationManager
@inject SearchService SearchService
@inject IOptions<WebApiOptions> Options
@inject HttpClient Client

<div class="input-group">

    <select class="form-select d-md-block d-none" @bind="SearchService.Category" style="max-width: 200px;">
        @if (_categories != null)
        {
            @foreach (var category in _categories)
            {
                <option value="@category.Name">@category.Name</option>
            }
        }
        else
        {
            <option>Загрузка...</option>
        }
    </select>

    <input type="search" class="form-control" placeholder="Я ищу..." @bind="SearchService.Query" @bind:event="oninput"
        @onkeypress="OnEnterKeyPress">

    <div class="input-group-text d-flex d-md-block d-none" style="background-color: #fff; cursor: pointer;"
        onclick="@OnLocationClick">
        <span class="oi oi-compass pe-1"></span>
        <label style="cursor: pointer;">
            @if (SearchService.Location != null)
            {
                @SearchService.Location
            }
            else
            {
                @("Загрузка...")
            }
        </label>
    </div>

    <button class="btn btn-outline-light" type="button" @onclick="OnSearchButtonClick">Поиск</button>

</div>


@code {
    [CascadingParameter]
    public IModalService? Modal { get; set; }

    private List<CategoryDto>? _categories;

    protected override async Task OnInitializedAsync()
    {

        SearchService.Location = await DataHandler.LoadAsync(
        Options.Value.Ip + Options.Value.GetCityFromIp, Client);

        _categories = await DataHandler.LoadAsync<List<CategoryDto>>(
        Options.Value.Ip + Options.Value.GetAllCategories!, Client);

        if (_categories != null && _categories.Count > 0)
            SearchService.Category = _categories.First().Name;
    }

    private void OnEnterKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            OnSearchButtonClick();
    }

    private void OnSearchButtonClick()
    {
        if (string.IsNullOrEmpty(SearchService.Query))
            return;

        try
        {
            NavigationManager.NavigateTo("search?" + SearchService.GetQuery());
            SearchService.OnSearchExecute();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task OnLocationClick()
    {
        var locationModal = Modal!.Show<LocationSelect>("Выберите город");
        var result = await locationModal.Result;

        if (!result.Cancelled)
            SearchService.Location = result.Data.ToString();
    }

}